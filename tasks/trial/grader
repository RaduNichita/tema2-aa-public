#!/usr/bin/python3

import inspect
import pathlib
import os
import sys

current_dir = os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))
root_dir = pathlib.Path(current_dir).parent.parent
sys.path.insert(0, str(root_dir))

from check_utils.grader import Grader

class TrialGrader(Grader):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def parse_output(self, output):
        expected_lines = 3

        if len(output) == 0:
            self.exit(code=-1, err=f"Output is empty")

        if not (output[0] == 'True' or output[0] == 'False'):
            self.exit(code=-1, err="First line must be True/False")

        if output[0] == 'True':
            if len(output) != expected_lines:
                self.exit(code=-1, err=f"Expected {expected_lines}, but got {len(output)} lines")
            return output[0], int(output[1]), output[2]
        else:
            return output[0], None, None

    def grade_test(self):
        try:
            input, output, ref = self.read()
            input = [x.strip("\n") for x in input]
            output = [x.strip("\n") for x in output]
            ref = [x.strip("\n") for x in ref]
        except:
            self.exit(code=-1, err=f"not valid input")

        oracle_result, set_size, set_indexes=self.parse_output(output)

        if oracle_result != ref[0]:
            self.exit(code=-1, err=f"Expected {ref[0]} from oracle, but got {oracle_result}")

        if (oracle_result == 'False'):
            self.add_points(self.max_points)
            return

        try:
            set_size = int(set_size)
        except:
            self.exit(code=-1, err=f"Size of set is not an integer")

        try:
            set_indexes = [int(x) for x in set_indexes.split(" ")[:set_size]]
        except:
            self.exit(code=-1, err=f"Indexes contains non-integer values")

        n, m, k = [int(x) for x in input[0].split(" ")]

        if (set_size != k):
            self.exit(code=-1, err=f"Expected a set of size {k}, but got a set of size {set_size}")

        sets = [[int(elem) for elem in x[1:].split(" ")[1:]] for x in input[1:]]

        reunion = set()
        for index in set_indexes:
            if index - 1 < 0 or index - 1 >= m:
                self.exit(code=-1, err=f"Not a valid index: {index}. The value should be between 1 and {m}")
            for elem in sets[index - 1]:
                reunion.add(int(elem))

        for i in range(1, n + 1):
            if i not in reunion:
                self.exit(code=-1, err=f"{i} not in reunion of given sets")

        self.add_points(self.max_points)

if __name__ == '__main__':
    assert len(sys.argv) == 5, sys.argv
    TrialGrader(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]).run()